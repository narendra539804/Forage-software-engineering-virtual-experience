From b2bd7d25c7d24342b66d300e51f4332f29025c3a Mon Sep 17 00:00:00 2001
From: narendra539804 <Narendranaidu9441610114@gmail.com>
Date: Tue, 14 Sep 2021 14:45:56 +0530
Subject: [PATCH] create patch file

---
 datafeed/test.csv |  0
 src/.env          |  1 +
 src/App.tsx       | 31 ++++++++++++++++++++++---------
 src/Graph.tsx     | 11 ++++++++---
 4 files changed, 31 insertions(+), 12 deletions(-)
 create mode 100644 datafeed/test.csv
 create mode 100644 src/.env

diff --git a/datafeed/test.csv b/datafeed/test.csv
new file mode 100644
index 0000000..e69de29
diff --git a/src/.env b/src/.env
new file mode 100644
index 0000000..7d910f1
--- /dev/null
+++ b/src/.env
@@ -0,0 +1 @@
+SKIP_PREFLIGHT_CHECK=true
\ No newline at end of file
diff --git a/src/App.tsx b/src/App.tsx
index 0728518..f83481d 100755
--- a/src/App.tsx
+++ b/src/App.tsx
@@ -8,6 +8,7 @@ import './App.css';
  */
 interface IState {
   data: ServerRespond[],
+  showGraph:boolean,
 }
 
 /**
@@ -22,26 +23,38 @@ class App extends Component<{}, IState> {
       // data saves the server responds.
       // We use this state to parse data down to the child element (Graph) as element property
       data: [],
+      showGraph:false,
+
     };
   }
 
   /**
    * Render Graph react component with state.data parse as property data
    */
-  renderGraph() {
-    return (<Graph data={this.state.data}/>)
-  }
+   renderGraph() {
+    if (this.state.showGraph) {
+        return (<Graph data={this.state.data}/>)
+    }
+    }
 
   /**
    * Get new data from server and update the state with the new data
    */
-  getDataFromServer() {
-    DataStreamer.getData((serverResponds: ServerRespond[]) => {
-      // Update the state by creating a new array of data that consists of
-      // Previous data in the state and the new data from server
-      this.setState({ data: [...this.state.data, ...serverResponds] });
+   getDataFromServer() {
+    let x = 0;
+    const intervel = setInterval(() => {
+     DataStreamer.getData((serverResponds:ServerRespond[]) => {
+     this.setState({
+         data: serverResponds,
+         showGraph: true,
+     });
     });
-  }
+   x++;
+   if (x>1000) {
+     clearInterval(intervel);
+   }
+   },100);
+   }
 
   /**
    * Render the App react component
diff --git a/src/Graph.tsx b/src/Graph.tsx
index ec1430e..f5fc3a1 100644
--- a/src/Graph.tsx
+++ b/src/Graph.tsx
@@ -1,5 +1,5 @@
 import React, { Component } from 'react';
-import { Table } from '@jpmorganchase/perspective';
+import { Table } from '@finos/perspective';
 import { ServerRespond } from './DataStreamer';
 import './Graph.css';
 
@@ -14,7 +14,7 @@ interface IProps {
  * Perspective library adds load to HTMLElement prototype.
  * This interface acts as a wrapper for Typescript compiler.
  */
-interface PerspectiveViewerElement {
+interface PerspectiveViewerElement extends HTMLElement{
   load: (table: Table) => void,
 }
 
@@ -32,7 +32,7 @@ class Graph extends Component<IProps, {}> {
 
   componentDidMount() {
     // Get element to attach the table from the DOM.
-    const elem: PerspectiveViewerElement = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
+    const elem= document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
 
     const schema = {
       stock: 'string',
@@ -49,6 +49,11 @@ class Graph extends Component<IProps, {}> {
 
       // Add more Perspective configurations here.
       elem.load(this.table);
+      elem.setAttribute('view','y_line');
+      elem.setAttribute('column-pivots','["stock"]');
+      elem.setAttribute('row-pivots','["timestamp"]');
+      elem.setAttribute('columns','["top_ask_price"]');
+      elem.setAttribute('aggregates','{"stock":"distinct count","top_Ask_price":"avg","top_bid_price":"avg","timestamp":"distinct count"}');
     }
   }
 
-- 
2.33.0.windows.1

